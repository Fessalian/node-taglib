{"name":"node-taglib","body":"node-taglib\r\n===========\r\n\r\nnode-taglib is a simple binding to\r\n[TagLib](http://developer.kde.org/~wheeler/taglib/) in Javascript.\r\n\r\nIt requires [node.js](http://nodejs.org).\r\n\r\nFor now it exposes Tag and AudioProperties. Synchronous write support is\r\nsupported for Tag.\r\n\r\n**NOTE: Asynchronous API requires use of TagLib [from git][taglib-git] since\r\ncertain bugs present in the released v1.7 cause problems.**\r\n\r\n[taglib-git]: https://github.com/taglib/taglib\r\n\r\n## Example\r\n\r\n    // load the library\r\n    var taglib = require('taglib');\r\n\r\n    // asynchronous API\r\n    taglib.tag(path, function(err, tag) {\r\n        tag.artist; // => \"Queen\"\r\n        tag.title = \"Erm\";\r\n        tag.saveSync();\r\n    });\r\n\r\n    // synchronous API\r\n    var tag = taglib.tagSync(path);\r\n\r\n    tag.title; // => \"Another one bites the dust\"\r\n    tag.artist; // => \"Kween\"\r\n    tag.artist = \"Queen\";\r\n\r\n    tag.isEmpty(); // => false\r\n\r\n    tag.saveSync(); // => true\r\n\r\n## Installation\r\n\r\n### via npm (Recommended)\r\n\r\n    npm install taglib\r\n\r\n### From source\r\n\r\n    # make sure you have node and taglib installed\r\n    git clone git://github.com/nikhilm/node-taglib.git\r\n    cd node-taglib\r\n    node-waf configure build\r\n    node examples/simple.js /path/to/mp3_or_ogg_file\r\n    # you can now require('./taglib')\r\n\r\nThe `examples` show usage.\r\n\r\n## API\r\n\r\n### read(path, callback)\r\n\r\nThe function you will most likely want to use. `callback` should have signature\r\n`callback(err, tag, audioProperties)` where `tag` and `audioProperties` are\r\nplain-old JavaScript objects. For the distinction between these and `Tag`, see\r\n`Tag` below.\r\n\r\nIf there was an error reading the file, `err` will be non-null and `tag` and\r\n`audioProperties` will be `null`.\r\n\r\nIf no tag was found, `tag` will be an empty object (falsy). `tag` can have the\r\nfollowing fields. node-taglib currently supports only the fields common to all\r\nformats:\r\n\r\n* title   (string)\r\n* album   (string)\r\n* comment (string)\r\n* artist  (string)\r\n* track   (string)\r\n* year    (integer)\r\n* genre   (string)\r\n\r\nIf no audio properties could be read, `audioProperties` will be an empty object\r\n(falsy). The following fields are available in `audioProperties`, all are\r\nintegers:\r\n\r\n* length\r\n* bitrate\r\n* sampleRate\r\n* channels\r\n\r\nWriting audio properties is not supported.\r\n\r\n### tag(path, callback)\r\n\r\nRead the tag from the file at `path` _asynchronously_. The callback should have\r\nsignature `(err, tag)`. On success, `err` will be `null` and `tag` will be\r\na `Tag`. If errors occurred, `err` will contain the error and\r\n`tag` will be `null`. `err` will be an object with field `code` having the\r\ninteger error code (`errno.h`) and field `message` will have a string\r\nrepresentation.\r\n\r\n### tagSync(path)\r\n\r\nRead the tag from the file at `path` _synchronously_. Returns a `Tag`. If\r\nerrors occurred, throws an exception.\r\n\r\n### Tag\r\n\r\n**NOTE: A Tag object should *NOT* be created using `new`. Instead use `tag()`\r\nor `tagSync()`**\r\n\r\nA Tag object allows _read-write_ access to all the meta-data fields. For valid\r\nfield names see `read()` above.\r\n\r\nTo get a value, simply access the field -- `tag.artist`.\r\n\r\nTo set a value, assign a value to the field -- `tag.year = 2012`. You **will\r\nhave to call `saveSync()`** to actually save the changes to the file on disc.\r\n\r\n##### Large number of files\r\n\r\nDue to TagLib's design, every `Tag` object in memory has to keep its backing\r\nfile descriptor open. If you are dealing with a large number of files, you will\r\nsoon run into problems because operating systems impose limits on how many\r\nfiles a process can have open simultaneously. If you want to only read tags,\r\nuse `read()` instead as it will immediately close the file after the tag is\r\nread.\r\n\r\n### Tag.save(callback)\r\n\r\nSave any changes in the Tag meta-data to disk _asynchronously_. `callback` will\r\nbe invoked once the save is done, and should have a signature `(err)`. `err`\r\nwill be `null` if the save was successful, otherwise it will be an object with\r\n`message` having the error string and `path` having the file path.\r\n\r\n### Tag.saveSync()\r\n\r\nSave any changes in the Tag meta-data to disk _synchronously_.\r\n\r\n### Tag.isEmpty()\r\n\r\nReturns whether the tag is empty or not.\r\n\r\n### taglib.WITH_ASF\r\n\r\nA boolean representing whether node-taglib supports ASF files. Depends on\r\nfeature being enabled in TagLib.\r\n\r\n### taglib.WITH_MP4\r\n\r\nA boolean representing whether node-taglib supports MP4 files. Depends on\r\nfeature being enabled in TagLib.\r\n\r\nContributors are listed at: <https://github.com/nikhilm/node-taglib/contributors>\r\n","tagline":"Simple taglib bindings to Javascript using node.js","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}